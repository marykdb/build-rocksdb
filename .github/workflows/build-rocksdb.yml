name: Build RocksDB

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  linux-x64:
    name: Linux x86_64
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build legacy toolchain container image
        run: docker build -t rocksdb-linux-legacy -f docker/linux-legacy.Dockerfile .
      - name: Build Linux x86_64 package
        run: |
          docker run --rm \
            -v "$PWD:/workspace" \
            -w /workspace \
            rocksdb-linux-legacy \
            bash -lc './build.sh linuxX64'
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-linux-x86_64
          path: build/archives/rocksdb-linux-x86_64.zip

  linux-arm64:
    name: Linux ARM64
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build legacy toolchain container image
        run: docker build -t rocksdb-linux-legacy -f docker/linux-legacy.Dockerfile .
      - name: Build Linux ARM64 package
        run: |
          docker run --rm \
            -v "$PWD:/workspace" \
            -w /workspace \
            rocksdb-linux-legacy \
            bash -lc './build.sh linuxArm64'
      - name: Ensure release tooling is available
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-linux-arm64
          path: build/archives/rocksdb-linux-arm64.zip

  android-arm32:
    name: Android ARM32
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android ARM32 package
        run: ./build.sh androidNativeArm32
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-arm32
          path: build/archives/rocksdb-android-arm32.zip

  android-arm64:
    name: Android ARM64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android ARM64 package
        run: ./build.sh androidNativeArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-arm64
          path: build/archives/rocksdb-android-arm64.zip

  android-x86:
    name: Android x86
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android x86 package
        run: ./build.sh androidNativeX86
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-x86
          path: build/archives/rocksdb-android-x86.zip

  android-x64:
    name: Android x86_64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android x86_64 package
        run: ./build.sh androidNativeX64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-x64
          path: build/archives/rocksdb-android-x64.zip

  mingw-x64:
    name: Windows (MinGW) x86_64
    runs-on: windows-2022
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          choco install -y ninja 7zip
      - name: Install LLVM MinGW toolchain
        run: |
          set -euo pipefail
          LLVM_MINGW_VERSION=20241030
          LLVM_MINGW_DIST="llvm-mingw-${LLVM_MINGW_VERSION}-msvcrt-x86_64"
          ARCHIVE_NAME="${LLVM_MINGW_DIST}.zip"
          ARCHIVE_PATH="$PWD/${ARCHIVE_NAME}"
          curl --fail --location --silent --show-error \
            "https://github.com/mstorsjo/llvm-mingw/releases/download/${LLVM_MINGW_VERSION}/${ARCHIVE_NAME}" \
            --output "$ARCHIVE_PATH"
          TOOLCHAIN_DIR="$PWD/toolchains"
          rm -rf "$TOOLCHAIN_DIR/${LLVM_MINGW_DIST}"
          mkdir -p "$TOOLCHAIN_DIR"
          7z x "$ARCHIVE_PATH" -o"$TOOLCHAIN_DIR" >/dev/null
          rm -f "$ARCHIVE_PATH"
          LLVM_MINGW_ROOT="$TOOLCHAIN_DIR/${LLVM_MINGW_DIST}"
          if [[ ! -d "$LLVM_MINGW_ROOT" ]]; then
            echo "Expected LLVM MinGW root $LLVM_MINGW_ROOT not found" >&2
            exit 1
          fi
          if command -v cygpath >/dev/null 2>&1; then
            LLVM_MINGW_ROOT_UNIX="$(cygpath -u "$LLVM_MINGW_ROOT")"
            LLVM_MINGW_BIN_UNIX="$(cygpath -u "$LLVM_MINGW_ROOT/bin")"
          else
            LLVM_MINGW_ROOT_UNIX="$LLVM_MINGW_ROOT"
            LLVM_MINGW_BIN_UNIX="$LLVM_MINGW_ROOT/bin"
          fi
          printf '%s\n' "$LLVM_MINGW_BIN_UNIX" >> "$GITHUB_PATH"
          printf 'LLVM_MINGW_ROOT=%s\n' "${LLVM_MINGW_ROOT_UNIX//\\/\\\\}" >> "$GITHUB_ENV"

      - name: Provision GCC runtime for libstdc++
        run: |
          set -euo pipefail
          RUNTIME_ARCHIVE="msys2-mingw-w64-x86_64-2.zip"
          RUNTIME_URL="https://download.jetbrains.com/kotlin/native/${RUNTIME_ARCHIVE}"
          ARCHIVE_PATH="$PWD/${RUNTIME_ARCHIVE}"
          curl --fail --location --silent --show-error \
            "$RUNTIME_URL" \
            --output "$ARCHIVE_PATH"
          RUNTIME_ROOT="$PWD/toolchains/jetbrains-msys2"
          rm -rf "$RUNTIME_ROOT"
          mkdir -p "$RUNTIME_ROOT"
          7z x "$ARCHIVE_PATH" -o"$RUNTIME_ROOT" >/dev/null
          rm -f "$ARCHIVE_PATH"
          SYSROOT_CANDIDATE="$RUNTIME_ROOT/msys2-mingw-w64-x86_64-2"
          if [[ ! -d "$SYSROOT_CANDIDATE/include" ]]; then
            echo "Failed to locate JetBrains sysroot includes at $SYSROOT_CANDIDATE" >&2
            exit 1
          fi
          if command -v cygpath >/dev/null 2>&1; then
            SYSROOT_UNIX="$(cygpath -u "$SYSROOT_CANDIDATE")"
            SYSROOT_PARENT_UNIX="$(cygpath -u "${SYSROOT_CANDIDATE}/.." 2>/dev/null || true)"
          else
            SYSROOT_UNIX="$SYSROOT_CANDIDATE"
            SYSROOT_PARENT_UNIX="${SYSROOT_CANDIDATE}/.."
          fi
          printf 'MINGW_SYSROOT=%s\n' "${SYSROOT_UNIX//\\/\\\\}" >> "$GITHUB_ENV"
          printf 'MINGW_GCC92_SYSROOT=%s\n' "${SYSROOT_UNIX//\\/\\\\}" >> "$GITHUB_ENV" # legacy var consumers expect GCC 9.x sysroot here
          if [[ -n "$SYSROOT_PARENT_UNIX" && "$SYSROOT_PARENT_UNIX" != "$SYSROOT_UNIX" ]]; then
            printf 'MINGW_FALLBACK_SYSROOT=%s\n' "${SYSROOT_PARENT_UNIX//\\/\\\\}" >> "$GITHUB_ENV"
          fi
      - name: Provision alternate GCC for bzip2
        run: |
          set -euo pipefail
          GCC9_VERSION=9.5.0
          WINLIBS_RELEASE="9.5.0-10.0.0-msvcrt-r1"
          ARCHIVE_NAME="winlibs-x86_64-posix-seh-gcc-${GCC9_VERSION}-mingw-w64msvcrt-10.0.0-r1.zip"
          ARCHIVE_PATH="$PWD/${ARCHIVE_NAME}"
          curl --fail --location --silent --show-error \
            "https://github.com/brechtsanders/winlibs_mingw/releases/download/${WINLIBS_RELEASE}/${ARCHIVE_NAME}" \
            --output "$ARCHIVE_PATH"
          TOOLCHAIN_DIR="$PWD/toolchains"
          ALT_ROOT="$TOOLCHAIN_DIR/winlibs-gcc-${GCC9_VERSION}"
          rm -rf "$ALT_ROOT"
          mkdir -p "$ALT_ROOT"
          7z x "$ARCHIVE_PATH" -o"$ALT_ROOT" >/dev/null
          rm -f "$ARCHIVE_PATH"
          if [[ -d "$ALT_ROOT/mingw64" ]]; then
            ALT_SYSROOT="$ALT_ROOT/mingw64"
          else
            ALT_SYSROOT="$(find "$ALT_ROOT" -maxdepth 2 -type d -name 'mingw64' | head -n 1)"
          fi
          if [[ -z "$ALT_SYSROOT" ]]; then
            echo "Failed to locate mingw64 sysroot from alternate GCC toolchain" >&2
            exit 1
          fi
          ALT_SYSROOT="$(cd "$ALT_SYSROOT" && pwd)"
          ALT_BIN_DIR="$ALT_SYSROOT/bin"
          if [[ ! -d "$ALT_BIN_DIR" ]]; then
            echo "Failed to locate alternate GCC bin directory" >&2
            exit 1
          fi
          if command -v cygpath >/dev/null 2>&1; then
            ALT_SYSROOT_UNIX="$(cygpath -u "$ALT_SYSROOT")"
            ALT_BIN_UNIX="$(cygpath -u "$ALT_BIN_DIR")"
          else
            ALT_SYSROOT_UNIX="$ALT_SYSROOT"
            ALT_BIN_UNIX="$ALT_BIN_DIR"
          fi
          echo "BZIP2_GCC_SYSROOT=${ALT_SYSROOT_UNIX//\\/\\\\}" >> "$GITHUB_ENV"
          echo "BZIP2_GCC_BIN_DIR=${ALT_BIN_UNIX//\\/\\\\}" >> "$GITHUB_ENV"
      - name: Build Windows MinGW package
        run: ./build.sh mingwX64
      - name: Verify libstdc++ usage in MinGW build
        run: |
          set -euo pipefail
          LIB_PATH="build/lib/mingw_x86_64/rocksdb-build/librocksdb.a"
          if [[ ! -f "$LIB_PATH" ]]; then
            LIB_PATH="build/lib/mingw_x86_64/librocksdb.a"
          fi
          if [[ ! -f "$LIB_PATH" ]]; then
            echo "Failed to locate built librocksdb.a in expected directories" >&2
            exit 1
          fi
          NM_BIN="x86_64-w64-mingw32-nm"
          if ! command -v "$NM_BIN" >/dev/null 2>&1; then
            if command -v llvm-nm >/dev/null 2>&1; then
              NM_BIN="llvm-nm"
            else
              echo "Error: Unable to locate an nm tool for inspection" >&2
              exit 1
            fi
          fi
          if "$NM_BIN" -C "$LIB_PATH" | grep -q "std::__1::"; then
            echo "Error: Detected libc++ symbols (std::__1) in librocksdb.a. Expected libstdc++." >&2
            exit 1
          fi
      - name: Create fat librocksdb.a with codec archives
        run: |
          set -euo pipefail

          LIB_ROOT="build/lib/mingw_x86_64"
          if [[ ! -d "$LIB_ROOT" ]]; then
            echo "Expected library directory $LIB_ROOT not found" >&2
            exit 1
          fi

          ROCKSDB_LIB="$LIB_ROOT/librocksdb.a"
          if [[ ! -f "$ROCKSDB_LIB" ]]; then
            ROCKSDB_LIB="$LIB_ROOT/rocksdb-build/librocksdb.a"
          fi
          if [[ ! -f "$ROCKSDB_LIB" ]]; then
            echo "Unable to locate librocksdb.a under $LIB_ROOT" >&2
            exit 1
          fi

          FAT_LIB="$LIB_ROOT/librocksdb-fat.a"
          rm -f "$FAT_LIB"

          find_ar() {
            if command -v llvm-ar >/dev/null 2>&1; then
              echo "llvm-ar"
              return
            fi
            if [[ -n "${MINGW_TRIPLE:-}" ]] && command -v "${MINGW_TRIPLE}-ar" >/dev/null 2>&1; then
              echo "${MINGW_TRIPLE}-ar"
              return
            fi
            if command -v ar >/dev/null 2>&1; then
              echo "ar"
              return
            fi
            echo ""
          }

          AR_BIN="$(find_ar)"
          if [[ -z "$AR_BIN" ]]; then
            echo "Failed to locate an archiver (llvm-ar/ar)" >&2
            exit 1
          fi

          codec_paths=(
            "$LIB_ROOT/libbz2.a"
            "$LIB_ROOT/libz.a"
            "$LIB_ROOT/libzstd.a"
            "$LIB_ROOT/libsnappy.a"
            "$LIB_ROOT/liblz4.a"
          )

          missing_codecs=()
          for codec_path in "${codec_paths[@]}"; do
            if [[ ! -f "$codec_path" ]]; then
              missing_codecs+=("${codec_path##*/}")
            fi
          done

          if (( ${#missing_codecs[@]} )); then
            echo "Missing codec archives required for fat library: ${missing_codecs[*]}" >&2
            exit 1
          fi

          {
            echo "CREATE $FAT_LIB"
            echo "ADDLIB $ROCKSDB_LIB"
            printf 'ADDLIB %s\n' "${codec_paths[@]}"
            echo 'SAVE'
            echo 'END'
          } | "$AR_BIN" -M

          if [[ ! -f "$FAT_LIB" ]]; then
            echo "Failed to create fat library at $FAT_LIB" >&2
            exit 1
          fi

          ARCHIVE_PATH="build/archives/rocksdb-mingw-x86_64.zip"
          if [[ ! -f "$ARCHIVE_PATH" ]]; then
            echo "Archive $ARCHIVE_PATH not found" >&2
            exit 1
          fi

          python <<'PY'
import pathlib
import zipfile

archive = pathlib.Path('build/archives/rocksdb-mingw-x86_64.zip')
fat_lib = pathlib.Path('build/lib/mingw_x86_64/librocksdb-fat.a')

if not fat_lib.exists():
    raise SystemExit(f'Fat library {fat_lib} not found')

with zipfile.ZipFile(archive, mode='a') as zf:
    zf.write(fat_lib, arcname='lib/librocksdb-fat.a')
PY
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-mingw-x86_64
          path: build/archives/rocksdb-mingw-x86_64.zip

#  mingw-arm64:
#    name: Windows (MinGW) ARM64
#    runs-on: windows-2022
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: true
#      - name: Install build dependencies
#        run: |
#          choco install -y make ninja
#      - name: Install LLVM MinGW toolchain
#        run: |
#          set -euo pipefail
#          LLVM_MINGW_VERSION=20241030
#          LLVM_MINGW_DIST=llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-x86_64
#          ARCHIVE_NAME="${LLVM_MINGW_DIST}.zip"
#          ARCHIVE_PATH="$PWD/${ARCHIVE_NAME}"
#          curl -sSL -o "$ARCHIVE_PATH" "https://github.com/mstorsjo/llvm-mingw/releases/download/${LLVM_MINGW_VERSION}/${ARCHIVE_NAME}"
#          TOOLCHAIN_DIR="$PWD/toolchains"
#          mkdir -p "$TOOLCHAIN_DIR"
#          rm -rf "$TOOLCHAIN_DIR/${LLVM_MINGW_DIST}"
#          python - "$ARCHIVE_PATH" "$TOOLCHAIN_DIR" <<'PY'
#          import pathlib, sys, zipfile
#
#          archive = pathlib.Path(sys.argv[1])
#          dest = pathlib.Path(sys.argv[2])
#          dest.mkdir(parents=True, exist_ok=True)
#          with zipfile.ZipFile(archive) as zf:
#              zf.extractall(dest)
#          PY
#          rm -f "$ARCHIVE_PATH"
#          LLVM_MINGW_ROOT="$TOOLCHAIN_DIR/${LLVM_MINGW_DIST}"
#          if [[ ! -d "$LLVM_MINGW_ROOT" ]]; then
#            echo "Expected toolchain directory $LLVM_MINGW_ROOT not found" >&2
#            exit 1
#          fi
#          echo "LLVM_MINGW_ROOT=$LLVM_MINGW_ROOT" >> "$GITHUB_ENV"
#          echo "$LLVM_MINGW_ROOT/bin" >> "$GITHUB_PATH"
#      - name: Build Windows ARM64 MinGW package
#        run: ./build.sh mingwArm64
#      - uses: actions/upload-artifact@v4
#        with:
#          name: rocksdb-mingw-arm64
#          path: build/archives/rocksdb-mingw-arm64.zip

  macos-x64:
    name: macOS x86_64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build macOS x86_64 package
        run: ./build.sh macosX64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-macos-x86_64
          path: build/archives/rocksdb-macos-x86_64.zip

  macos-arm64:
    name: macOS ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build macOS ARM64 package
        run: ./build.sh macosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-macos-arm64
          path: build/archives/rocksdb-macos-arm64.zip

  ios-arm64:
    name: iOS ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build iOS ARM64 package
        run: ./build.sh iosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-ios-arm64
          path: build/archives/rocksdb-ios-arm64.zip

  ios-simulator-arm64:
    name: iOS Simulator ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build iOS Simulator ARM64 package
        run: ./build.sh iosSimulatorArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-ios-simulator-arm64
          path: build/archives/rocksdb-ios-simulator-arm64.zip

  watchos-arm64:
    name: watchOS arm64_32
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build watchOS arm64_32 package
        run: ./build.sh watchosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-watchos-arm64
          path: build/archives/rocksdb-watchos-arm64.zip

  watchos-device-arm64:
    name: watchOS Device ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build watchOS Device ARM64 package
        run: ./build.sh watchosDeviceArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-watchos-device-arm64
          path: build/archives/rocksdb-watchos-device-arm64.zip

  watchos-simulator-arm64:
    name: watchOS Simulator ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build watchOS Simulator ARM64 package
        run: ./build.sh watchosSimulatorArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-watchos-simulator-arm64
          path: build/archives/rocksdb-watchos-simulator-arm64.zip

  tvos-arm64:
    name: tvOS ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build tvOS ARM64 package
        run: ./build.sh tvosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-tvos-arm64
          path: build/archives/rocksdb-tvos-arm64.zip

  tvos-simulator-arm64:
    name: tvOS Simulator ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build tvOS Simulator ARM64 package
        run: ./build.sh tvosSimulatorArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-tvos-simulator-arm64
          path: build/archives/rocksdb-tvos-simulator-arm64.zip

  publish-release:
    name: Publish Release
    needs:
      - linux-x64
      - linux-arm64
      - mingw-x64
#      - mingw-arm64
      - macos-x64
      - macos-arm64
      - ios-arm64
      - ios-simulator-arm64
      - watchos-arm64
      - watchos-device-arm64
      - watchos-simulator-arm64
      - tvos-arm64
      - tvos-simulator-arm64
      - android-arm32
      - android-arm64
      - android-x86
      - android-x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List downloaded artifacts
        run: ls -R artifacts
      - name: Determine RocksDB version
        id: rocksdb_version
        run: |
          set -euo pipefail
          version_file="rocksdb/include/rocksdb/version.h"
          if [[ ! -f "$version_file" ]]; then
            echo "RocksDB version header not found at $version_file" >&2
            exit 1
          fi
          version="$(awk '/#define ROCKSDB_MAJOR/{major=$3} /#define ROCKSDB_MINOR/{minor=$3} /#define ROCKSDB_PATCH/{patch=$3} END{if(major==""||minor==""||patch=="") exit 1; printf "%s.%s.%s", major, minor, patch}' "$version_file")"
          if [[ -z "$version" ]]; then
            echo "Failed to parse RocksDB version from $version_file" >&2
            exit 1
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Set release metadata
        id: release_metadata
        env:
          ROCKSDB_VERSION: ${{ steps.rocksdb_version.outputs.version }}
        run: |
          set -euo pipefail
          if [[ -z "${ROCKSDB_VERSION}" ]]; then
            echo "RocksDB version is empty" >&2
            exit 1
          fi
          timestamp="$(date +'%Y%m%dT%H%M%S')Z"
          echo "timestamp=$timestamp" >> "$GITHUB_OUTPUT"
          echo "tag=rocksdb-${ROCKSDB_VERSION}-${timestamp}" >> "$GITHUB_OUTPUT"
      - uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.zip
          name: RocksDB ${{ steps.rocksdb_version.outputs.version }} builds ${{ steps.release_metadata.outputs.timestamp }}
          tag_name: ${{ steps.release_metadata.outputs.tag }}
          draft: false
          prerelease: false
