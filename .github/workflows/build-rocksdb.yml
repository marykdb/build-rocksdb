name: Build RocksDB

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  linux-x64:
    name: Linux x86_64
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build legacy toolchain container image
        run: docker build -t rocksdb-linux-legacy -f docker/linux-legacy.Dockerfile .
      - name: Build Linux x86_64 package
        run: |
          docker run --rm \
            -v "$PWD:/workspace" \
            -w /workspace \
            rocksdb-linux-legacy \
            bash -lc './build.sh linuxX64'
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-linux-x86_64
          path: build/archives/rocksdb-linux-x86_64.zip

  linux-arm64:
    name: Linux ARM64
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build legacy toolchain container image
        run: docker build -t rocksdb-linux-legacy -f docker/linux-legacy.Dockerfile .
      - name: Build Linux ARM64 package
        run: |
          docker run --rm \
            -v "$PWD:/workspace" \
            -w /workspace \
            rocksdb-linux-legacy \
            bash -lc './build.sh linuxArm64'
      - name: Ensure release tooling is available
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-linux-arm64
          path: build/archives/rocksdb-linux-arm64.zip

  android-arm32:
    name: Android ARM32
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android ARM32 package
        run: ./build.sh androidNativeArm32
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-arm32
          path: build/archives/rocksdb-android-arm32.zip

  android-arm64:
    name: Android ARM64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android ARM64 package
        run: ./build.sh androidNativeArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-arm64
          path: build/archives/rocksdb-android-arm64.zip

  android-x86:
    name: Android x86
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android x86 package
        run: ./build.sh androidNativeX86
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-x86
          path: build/archives/rocksdb-android-x86.zip

  android-x64:
    name: Android x86_64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android x86_64 package
        run: ./build.sh androidNativeX64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-x64
          path: build/archives/rocksdb-android-x64.zip

  mingw-x64:
    name: Windows (MinGW) x86_64
    runs-on: windows-2022
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          choco install -y make ninja
      - name: Install MinGW-w64 GCC toolchain
        run: |
          set -euo pipefail
          choco install -y mingw --version=9.4.0
          DEFAULT_ROOT="C:/ProgramData/mingw64/mingw64"
          ALT_ROOT="C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64"
          if [[ -n "${MINGW_ROOT:-}" && -d "${MINGW_ROOT}/bin" ]]; then
            TOOLCHAIN_ROOT="$MINGW_ROOT"
          elif [[ -d "${DEFAULT_ROOT}/bin" ]]; then
            TOOLCHAIN_ROOT="$DEFAULT_ROOT"
          elif [[ -d "${ALT_ROOT}/bin" ]]; then
            TOOLCHAIN_ROOT="$ALT_ROOT"
          else
            echo "Failed to locate MinGW installation directory" >&2
            exit 1
          fi
          echo "Using MinGW toolchain at ${TOOLCHAIN_ROOT}"
          echo "MINGW_ROOT=${TOOLCHAIN_ROOT}" >> "$GITHUB_ENV"
          echo "${TOOLCHAIN_ROOT}/bin" >> "$GITHUB_PATH"
      - name: Build Windows MinGW package
        run: ./build.sh mingwX64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-mingw-x86_64
          path: build/archives/rocksdb-mingw-x86_64.zip

#  mingw-arm64:
#    name: Windows (MinGW) ARM64
#    runs-on: windows-2022
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: true
#      - name: Install build dependencies
#        run: |
#          choco install -y make ninja
#      - name: Install LLVM MinGW toolchain
#        run: |
#          set -euo pipefail
#          LLVM_MINGW_VERSION=20250910
#          LLVM_MINGW_DIST=llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-x86_64
#          ARCHIVE_NAME="${LLVM_MINGW_DIST}.zip"
#          ARCHIVE_PATH="$PWD/${ARCHIVE_NAME}"
#          curl -sSL -o "$ARCHIVE_PATH" "https://github.com/mstorsjo/llvm-mingw/releases/download/${LLVM_MINGW_VERSION}/${ARCHIVE_NAME}"
#          TOOLCHAIN_DIR="$PWD/toolchains"
#          mkdir -p "$TOOLCHAIN_DIR"
#          rm -rf "$TOOLCHAIN_DIR/${LLVM_MINGW_DIST}"
#          python - "$ARCHIVE_PATH" "$TOOLCHAIN_DIR" <<'PY'
#          import pathlib, sys, zipfile
#
#          archive = pathlib.Path(sys.argv[1])
#          dest = pathlib.Path(sys.argv[2])
#          dest.mkdir(parents=True, exist_ok=True)
#          with zipfile.ZipFile(archive) as zf:
#              zf.extractall(dest)
#          PY
#          rm -f "$ARCHIVE_PATH"
#          LLVM_MINGW_ROOT="$TOOLCHAIN_DIR/${LLVM_MINGW_DIST}"
#          if [[ ! -d "$LLVM_MINGW_ROOT" ]]; then
#            echo "Expected toolchain directory $LLVM_MINGW_ROOT not found" >&2
#            exit 1
#          fi
#          echo "LLVM_MINGW_ROOT=$LLVM_MINGW_ROOT" >> "$GITHUB_ENV"
#          echo "$LLVM_MINGW_ROOT/bin" >> "$GITHUB_PATH"
#      - name: Build Windows ARM64 MinGW package
#        run: ./build.sh mingwArm64
#      - uses: actions/upload-artifact@v4
#        with:
#          name: rocksdb-mingw-arm64
#          path: build/archives/rocksdb-mingw-arm64.zip

  macos-x64:
    name: macOS x86_64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build macOS x86_64 package
        run: ./build.sh macosX64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-macos-x86_64
          path: build/archives/rocksdb-macos-x86_64.zip

  macos-arm64:
    name: macOS ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build macOS ARM64 package
        run: ./build.sh macosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-macos-arm64
          path: build/archives/rocksdb-macos-arm64.zip

  ios-arm64:
    name: iOS ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build iOS ARM64 package
        run: ./build.sh iosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-ios-arm64
          path: build/archives/rocksdb-ios-arm64.zip

  ios-simulator-arm64:
    name: iOS Simulator ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build iOS Simulator ARM64 package
        run: ./build.sh iosSimulatorArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-ios-simulator-arm64
          path: build/archives/rocksdb-ios-simulator-arm64.zip

  watchos-arm64:
    name: watchOS arm64_32
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build watchOS arm64_32 package
        run: ./build.sh watchosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-watchos-arm64
          path: build/archives/rocksdb-watchos-arm64.zip

  watchos-device-arm64:
    name: watchOS Device ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build watchOS Device ARM64 package
        run: ./build.sh watchosDeviceArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-watchos-device-arm64
          path: build/archives/rocksdb-watchos-device-arm64.zip

  watchos-simulator-arm64:
    name: watchOS Simulator ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build watchOS Simulator ARM64 package
        run: ./build.sh watchosSimulatorArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-watchos-simulator-arm64
          path: build/archives/rocksdb-watchos-simulator-arm64.zip

  tvos-arm64:
    name: tvOS ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build tvOS ARM64 package
        run: ./build.sh tvosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-tvos-arm64
          path: build/archives/rocksdb-tvos-arm64.zip

  tvos-simulator-arm64:
    name: tvOS Simulator ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build tvOS Simulator ARM64 package
        run: ./build.sh tvosSimulatorArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-tvos-simulator-arm64
          path: build/archives/rocksdb-tvos-simulator-arm64.zip

  publish-release:
    name: Publish Release
    needs:
      - linux-x64
      - linux-arm64
      - mingw-x64
#      - mingw-arm64
      - macos-x64
      - macos-arm64
      - ios-arm64
      - ios-simulator-arm64
      - watchos-arm64
      - watchos-device-arm64
      - watchos-simulator-arm64
      - tvos-arm64
      - tvos-simulator-arm64
      - android-arm32
      - android-arm64
      - android-x86
      - android-x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List downloaded artifacts
        run: ls -R artifacts
      - name: Determine RocksDB version
        id: rocksdb_version
        run: |
          set -euo pipefail
          version_file="rocksdb/include/rocksdb/version.h"
          if [[ ! -f "$version_file" ]]; then
            echo "RocksDB version header not found at $version_file" >&2
            exit 1
          fi
          version="$(awk '/#define ROCKSDB_MAJOR/{major=$3} /#define ROCKSDB_MINOR/{minor=$3} /#define ROCKSDB_PATCH/{patch=$3} END{if(major==""||minor==""||patch=="") exit 1; printf "%s.%s.%s", major, minor, patch}' "$version_file")"
          if [[ -z "$version" ]]; then
            echo "Failed to parse RocksDB version from $version_file" >&2
            exit 1
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Set release metadata
        id: release_metadata
        env:
          ROCKSDB_VERSION: ${{ steps.rocksdb_version.outputs.version }}
        run: |
          set -euo pipefail
          if [[ -z "${ROCKSDB_VERSION}" ]]; then
            echo "RocksDB version is empty" >&2
            exit 1
          fi
          timestamp="$(date +'%Y%m%dT%H%M%S')Z"
          echo "timestamp=$timestamp" >> "$GITHUB_OUTPUT"
          echo "tag=rocksdb-${ROCKSDB_VERSION}-${timestamp}" >> "$GITHUB_OUTPUT"
      - uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.zip
          name: RocksDB ${{ steps.rocksdb_version.outputs.version }} builds ${{ steps.release_metadata.outputs.timestamp }}
          tag_name: ${{ steps.release_metadata.outputs.tag }}
          draft: false
          prerelease: false
