name: Build RocksDB

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  linux-x64:
    name: Linux x86_64 (old glibc, GCC 8)
    runs-on: ubuntu-24.04
    container:
      image: quay.io/pypa/manylinux2014_x86_64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup toolchain (GCC 8) and build tools
        shell: bash
        run: |
          yum -y install epel-release
          yum -y install devtoolset-8 git make autoconf automake libtool \
                         which unzip zip curl
          # manylinux has cmake; if you need newer:
          yum -y install cmake3 || true
          alternatives --set cmake /usr/bin/cmake3 || true
          source /opt/rh/devtoolset-8/enable
          echo "CC=$(which gcc)" >> $GITHUB_ENV
          echo "CXX=$(which g++)" >> $GITHUB_ENV
      - name: Build native dependency
        shell: bash
        env:
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
        run: |
          source /opt/rh/devtoolset-8/enable
          export CFLAGS="-O2 -fPIC"
          export CXXFLAGS="-O2 -fPIC -static-libstdc++ -static-libgcc -D_GLIBCXX_USE_CXX11_ABI=1"
          export LDFLAGS="-static-libstdc++ -static-libgcc"
          ./build.sh linuxX64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-linux-x86_64
          path: build/archives/rocksdb-linux-x86_64.zip

  linux-arm64:
    name: Linux aarch64 (old glibc, GCC 8)
    runs-on: ubuntu-24.04-arm64
    container:
      image: quay.io/pypa/manylinux2014_aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup toolchain (GCC 8) and build tools
        shell: bash
        run: |
          yum -y install epel-release
          yum -y install devtoolset-8 git make autoconf automake libtool \
                         which unzip zip curl
          yum -y install cmake3 || true
          alternatives --set cmake /usr/bin/cmake3 || true
          source /opt/rh/devtoolset-8/enable
          echo "CC=$(which gcc)" >> $GITHUB_ENV
          echo "CXX=$(which g++)" >> $GITHUB_ENV
      - name: Build native dependency
        shell: bash
        env:
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
        run: |
          source /opt/rh/devtoolset-8/enable
          export CFLAGS="-O2 -fPIC"
          export CXXFLAGS="-O2 -fPIC -static-libstdc++ -static-libgcc -D_GLIBCXX_USE_CXX11_ABI=1"
          export LDFLAGS="-static-libstdc++ -static-libgcc"
          ./build.sh linuxArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-linux-arm64
          path: build/archives/rocksdb-linux-arm64.zip

  android-arm32:
    name: Android ARM32
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android ARM32 package
        run: ./build.sh androidNativeArm32
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-arm32
          path: build/archives/rocksdb-android-arm32.zip

  android-arm64:
    name: Android ARM64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android ARM64 package
        run: ./build.sh androidNativeArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-arm64
          path: build/archives/rocksdb-android-arm64.zip

  android-x86:
    name: Android x86
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android x86 package
        run: ./build.sh androidNativeX86
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-x86
          path: build/archives/rocksdb-android-x86.zip

  android-x64:
    name: Android x86_64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip
      - name: Build Android x86_64 package
        run: ./build.sh androidNativeX64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-android-x64
          path: build/archives/rocksdb-android-x64.zip

  mingw-x64:
    name: Windows (MinGW) x86_64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip mingw-w64
      - name: Build Windows MinGW package
        run: ./build.sh mingwX64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-mingw-x86_64
          path: build/archives/rocksdb-mingw-x86_64.zip

  mingw-arm64:
    name: Windows (MinGW) ARM64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config autoconf automake libtool curl unzip zip clang xz-utils
      - name: Install LLVM MinGW toolchain
        run: |
          LLVM_MINGW_VERSION=20250910
          LLVM_MINGW_DIST=llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-x86_64
          curl -sSL -o llvm-mingw.tar.xz "https://github.com/mstorsjo/llvm-mingw/releases/download/${LLVM_MINGW_VERSION}/${LLVM_MINGW_DIST}.tar.xz"
          mkdir -p "$RUNNER_TEMP/llvm-mingw"
          tar -xJf llvm-mingw.tar.xz -C "$RUNNER_TEMP/llvm-mingw" --strip-components=1
          echo "LLVM_MINGW_ROOT=$RUNNER_TEMP/llvm-mingw" >> "$GITHUB_ENV"
          echo "$RUNNER_TEMP/llvm-mingw/bin" >> "$GITHUB_PATH"
      - name: Build Windows ARM64 MinGW package
        run: ./build.sh mingwArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-mingw-arm64
          path: build/archives/rocksdb-mingw-arm64.zip

  macos-x64:
    name: macOS x86_64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build macOS x86_64 package
        run: ./build.sh macosX64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-macos-x86_64
          path: build/archives/rocksdb-macos-x86_64.zip

  macos-arm64:
    name: macOS ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build macOS ARM64 package
        run: ./build.sh macosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-macos-arm64
          path: build/archives/rocksdb-macos-arm64.zip

  ios-arm64:
    name: iOS ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build iOS ARM64 package
        run: ./build.sh iosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-ios-arm64
          path: build/archives/rocksdb-ios-arm64.zip

  ios-simulator-arm64:
    name: iOS Simulator ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build iOS Simulator ARM64 package
        run: ./build.sh iosSimulatorArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-ios-simulator-arm64
          path: build/archives/rocksdb-ios-simulator-arm64.zip

  watchos-arm64:
    name: watchOS arm64_32
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build watchOS arm64_32 package
        run: ./build.sh watchosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-watchos-arm64
          path: build/archives/rocksdb-watchos-arm64.zip

  watchos-device-arm64:
    name: watchOS Device ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build watchOS Device ARM64 package
        run: ./build.sh watchosDeviceArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-watchos-device-arm64
          path: build/archives/rocksdb-watchos-device-arm64.zip

  watchos-simulator-arm64:
    name: watchOS Simulator ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build watchOS Simulator ARM64 package
        run: ./build.sh watchosSimulatorArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-watchos-simulator-arm64
          path: build/archives/rocksdb-watchos-simulator-arm64.zip

  tvos-arm64:
    name: tvOS ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build tvOS ARM64 package
        run: ./build.sh tvosArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-tvos-arm64
          path: build/archives/rocksdb-tvos-arm64.zip

  tvos-simulator-arm64:
    name: tvOS Simulator ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build tvOS Simulator ARM64 package
        run: ./build.sh tvosSimulatorArm64
      - uses: actions/upload-artifact@v4
        with:
          name: rocksdb-tvos-simulator-arm64
          path: build/archives/rocksdb-tvos-simulator-arm64.zip

#  windows-arm64-smoke:
#    name: Windows ARM64 Smoke Test
#    runs-on:
#      - windows-2022
#      - ARM64
#    needs:
#      - mingw-arm64
#    continue-on-error: true
#    steps:
#      - name: Download Windows ARM64 artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: rocksdb-mingw-arm64
#          path: windows-arm64
#      - name: Verify ARM64 artifact contents
#        shell: pwsh
#        run: |
#          Expand-Archive -Path 'windows-arm64/rocksdb-mingw-arm64.zip' -DestinationPath 'windows-arm64/unpacked' -Force
#          if (-not (Test-Path -Path 'windows-arm64/unpacked/lib/librocksdb.a')) {
#            throw 'librocksdb.a not found in ARM64 artifact'
#          }

  publish-release:
    name: Publish Release
    needs:
      - linux-x64
      - linux-arm64
      - mingw-x64
      - mingw-arm64
      - macos-x64
      - macos-arm64
      - ios-arm64
      - ios-simulator-arm64
      - watchos-arm64
      - watchos-device-arm64
      - watchos-simulator-arm64
      - tvos-arm64
      - tvos-simulator-arm64
      - android-arm32
      - android-arm64
      - android-x86
      - android-x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List downloaded artifacts
        run: ls -R artifacts
      - name: Determine RocksDB version
        id: rocksdb_version
        run: |
          set -euo pipefail
          version_file="rocksdb/include/rocksdb/version.h"
          if [[ ! -f "$version_file" ]]; then
            echo "RocksDB version header not found at $version_file" >&2
            exit 1
          fi
          version="$(awk '/#define ROCKSDB_MAJOR/{major=$3} /#define ROCKSDB_MINOR/{minor=$3} /#define ROCKSDB_PATCH/{patch=$3} END{if(major==""||minor==""||patch=="") exit 1; printf "%s.%s.%s", major, minor, patch}' "$version_file")"
          if [[ -z "$version" ]]; then
            echo "Failed to parse RocksDB version from $version_file" >&2
            exit 1
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Set release metadata
        id: release_metadata
        env:
          ROCKSDB_VERSION: ${{ steps.rocksdb_version.outputs.version }}
        run: |
          set -euo pipefail
          if [[ -z "${ROCKSDB_VERSION}" ]]; then
            echo "RocksDB version is empty" >&2
            exit 1
          fi
          timestamp="$(date +'%Y%m%dT%H%M%S')Z"
          echo "timestamp=$timestamp" >> "$GITHUB_OUTPUT"
          echo "tag=rocksdb-${ROCKSDB_VERSION}-${timestamp}" >> "$GITHUB_OUTPUT"
      - uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.zip
          name: RocksDB ${{ steps.rocksdb_version.outputs.version }} builds ${{ steps.release_metadata.outputs.timestamp }}
          tag_name: ${{ steps.release_metadata.outputs.tag }}
          draft: false
          prerelease: false
